import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useState } from "react";
import { useTransactions, useTokenBalances } from '@duneanalytics/hooks';
import { useAccount } from 'wagmi';

export default function Home() {
	const [isNetworkSwitchHighlighted, setIsNetworkSwitchHighlighted] =
		useState(false);
	const [isConnectHighlighted, setIsConnectHighlighted] = useState(false);
	const [activeTab, setActiveTab] = useState<'transactions' | 'balances'>('balances');

	// Get connected wallet address
	const { address: walletAddress } = useAccount();

	// Add Dune hooks
	const { data: transactions, isLoading: txLoading, nextPage, previousPage, currentPage } = useTransactions(walletAddress ?? "", {});
	const { data: balances, isLoading: balLoading } = useTokenBalances(walletAddress ?? "", {});

	const tableStyles = {
		table: {
			width: '100%',
			borderCollapse: 'collapse' as const,
			marginTop: '20px',
		},
		// background: linear-gradient(95deg, #7baff3, #3f8ef6, #0b2c56, #4e70d0);
	headerCell: {
			borderBottom: '2px solid #3f8ef6',
			textAlign: 'left' as const,
			padding: '8px',
			backgroundColor: '#3f8ef6',
			color: '#333',
		},
		row: {
			borderBottom: '1px solid #7baff3',
		},
		cell: {
			padding: '8px',
			color: 'grey',
		},
		tabButton: {
			padding: '10px 20px',
			margin: '0 10px',
			border: 'none',
			borderRadius: '5px',
			cursor: 'pointer',
			backgroundColor: '#0b2c56',
			color: 'white',
		},
		activeTab: {
			backgroundColor: '#f2f2f2',
			color: 'black'
		}
	};

	const closeAll = () => {
		setIsNetworkSwitchHighlighted(false);
		setIsConnectHighlighted(false);
	};

	return (
		<>
			<Head>
				<title>WalletConnect | Next Starter Template</title>
				<meta
					name="description"
					content="Generated by create-wc-dapp"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<header>
				<div
					className={styles.backdrop}
					style={{
						opacity:
							isConnectHighlighted || isNetworkSwitchHighlighted
								? 1
								: 0,
					}}
				/>
				<div className={styles.header}>
					<div className={styles.logo}>
						<Image
							src="/logo.svg"
							alt="WalletConnect Logo"
							height="32"
							width="203"
						/>
					</div>
					<div className={styles.buttons}>
						<div
							onClick={closeAll}
							className={`${styles.highlight} ${
								isNetworkSwitchHighlighted
									? styles.highlightSelected
									: ``
							}`}
						>
							<w3m-network-button />
						</div>
						<div
							onClick={closeAll}
							className={`${styles.highlight} ${
								isConnectHighlighted
									? styles.highlightSelected
									: ``
							}`}
						>
							<w3m-button />
						</div>
					</div>
				</div>
			</header>
			<main className={styles.main}>
				<div className={styles.wrapper}>
					<div className={styles.container}>
						<h1 style={{textAlign: "center"}}>Dune Echo x WalletConnect x Wagmi</h1>
						<div className={styles.content}>
							<div style={{ textAlign: 'center', marginBottom: '20px' }}>
							<button 
									style={{
										...tableStyles.tabButton,
										...(activeTab === 'balances' ? tableStyles.activeTab : {})
									}}
									onClick={() => setActiveTab('balances')}
								>
									Balances
								</button>
								<button 
									style={{
										...tableStyles.tabButton,
										...(activeTab === 'transactions' ? tableStyles.activeTab : {})
									}}
									onClick={() => setActiveTab('transactions')}
								>
									Transactions
								</button>
							</div>

							{activeTab === 'transactions' && (
								<div style={{ marginTop: '2rem' }}>
									<h2>Recent Transactions</h2>
									{txLoading ? (
										<p>Loading transactions...</p>
									) : (
										<>
											<table style={tableStyles.table}>
												<thead>
													<tr>
														<th style={tableStyles.headerCell}>Chain</th>
														<th style={tableStyles.headerCell}>Hash</th>
														<th style={tableStyles.headerCell}>From</th>
														<th style={tableStyles.headerCell}>To</th>
													</tr>
												</thead>
												<tbody>
													{transactions?.transactions?.map((tx: any, index: number) => (
														<tr key={index} style={tableStyles.row}>
															<td style={tableStyles.cell}>{tx.chain}</td>
															<td style={tableStyles.cell}>{tx.hash.slice(0, 10)}...</td>
															<td style={tableStyles.cell}>{tx.from.slice(0, 10)}...</td>
															<td style={tableStyles.cell}>{tx.to.slice(0, 10)}...</td>
														</tr>
													))}
												</tbody>
											</table>
											<div style={{ marginTop: '1rem' }}>
												<button onClick={previousPage} disabled={currentPage === 0}>
													Previous Page
												</button>
												<button onClick={nextPage} disabled={!transactions?.next_offset}>
													Next Page
												</button>
												<p>Page: {currentPage + 1 || 1}</p>
											</div>
										</>
									)}
								</div>
							)}

							{activeTab === 'balances' && (
								<div style={{ marginTop: '2rem' }}>
									<h2>Token Balances</h2>
									{balLoading ? (
										<p>Loading balances...</p>
									) : (
										<table style={tableStyles.table}>
											<thead>
												<tr>
													<th style={tableStyles.headerCell}>Chain</th>
													<th style={tableStyles.headerCell}>Token</th>
													<th style={tableStyles.headerCell}>Amount</th>
													<th style={tableStyles.headerCell}>Value (USD)</th>
												</tr>
											</thead>
											<tbody>
												{balances?.balances?.map((balance, index: number) => {
													const amount = BigInt(balance.amount);
													const decimals = balance.decimals !== undefined ? BigInt(balance.decimals) : BigInt(18);
													const integerPart = amount / (BigInt(10) ** decimals);
													const remainder = amount % (BigInt(10) ** decimals);
													const fractionalPart = remainder.toString().padStart(Number(decimals), '0').slice(0, 6);

													return (
														<tr key={index} style={tableStyles.row}>
															<td style={tableStyles.cell}>{balance.chain}</td>
															<td style={tableStyles.cell}>{balance.symbol}</td>
															<td style={tableStyles.cell}>{integerPart.toString()}.{fractionalPart}</td>
															<td style={tableStyles.cell}>${balance.value_usd}</td>
														</tr>
													);
												})}
											</tbody>
										</table>
									)}
								</div>
							)}
						</div>
					</div>
					<div className={styles.footer}>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							strokeWidth={1.5}
							stroke="currentColor"
							height={16}
							width={16}
						>
							<path
								strokeLinecap="round"
								strokeLinejoin="round"
								d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z"
							/>
						</svg>
						<a
							href="https://docs.dune.com/echo/overview"
							target="_blank"
						>
							Check out the full documentation here
						</a>
					</div>
				</div>
			</main>
		</>
	);
}
